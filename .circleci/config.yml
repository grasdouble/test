version: 2
jobs:
  build:
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run:
          name: Determine which projects have changed and trigger the builds
          command: |
            # Identify modified directories

            LAST_SUCCESSFUL_BUILD_URL="https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH?filter=completed&limit=1"
            LAST_SUCCESSFUL_COMMIT=`curl -Ss -u "$CIRCLE_TOKEN:" $LAST_SUCCESSFUL_BUILD_URL | jq -r '.[0]["vcs_revision"]'`

            #first commit in a branch
            if [[ ${LAST_SUCCESSFUL_COMMIT} == "null" ]]; then
              COMMITS="origin/master"
            else
              COMMITS="${CIRCLE_SHA1}..${LAST_SUCCESSFUL_COMMIT}"
            fi

            git diff --name-only $COMMITS | cut -d/ -f2 | sort -u > projects
            echo -e "Modified directories:\n`cat projects`\n"


            # If modified directories contain Gopkg/vendor directores, build all projects and exit
            buildall=0
            for project in `cat projects`; do
              if [[ ${project} =~ "lerna" || ${project} =~ "package.json" || ${project} =~ "README.md" ]]; then
                buildall=1
                echo -e "Dependencies change detected. building all $CIRCLE_PROJECT_REPONAME"
                curl -s -u ${CIRCLE_TOKEN}: \
                    -d build_parameters[CIRCLE_JOB]=all \
                    https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH
              fi
              if [[ ${buildall} -eq 1 ]]; then
                exit 0
              fi
            done

            # Build affected projects and their dependencies

            projects_inc_dep=(`cat projects`)
            echo -e "Calculating dependencies\n"
            for dir in `ls -d */`; do
              for dep in `go list -f '{{ .Deps }}' ./${dir} 2>/dev/null`; do
                for project_dep in `echo $dep | grep github.com/grasdouble/$CIRCLE_PROJECT_REPONAME | egrep -v "vendor|${dir%\/}"`; do
                  if [[ " ${projects_inc_dep[@]} " =~ " ${project_dep##*\/} " ]] && ! [[ " ${projects_inc_dep[@]} " =~ " ${dir%\/} " ]]; then
                    projects_inc_dep+=(${dir%\/})
                  fi
                done
              done
            done

            echo -e "Building: ${projects_inc_dep[@]}\n"
            for project in ${projects_inc_dep[@]}; do
              if grep -Fxq $project packages-dirs; then
                printf "\nTriggerring build for project: "$project
                curl -s -u ${CIRCLE_TOKEN}: \
                  -d build_parameters[CIRCLE_JOB]=${project} \
                  https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH
              fi
            done
  backend:
    docker:
      - image: circleci/node:11.14.0
    environment:
      PROJECT_NAME: test-backend
    steps:
      - checkout
      - run:
          name: add-github-token
          command: 'sed "s/GITHUB_TOKEN/$GITHUB_TOKEN/g" packages/backend/config.js'
      - run:
          name: update-npm
          command: 'sudo npm install -g npm@6.9.0'
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: npm-install
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: npm-test-backend
          command: npm run test:backend -- --coverage

  frontend:
    docker:
      - image: circleci/node:11.14.0
    environment:
      PROJECT_NAME: test-backend
    steps:
      - checkout
      - run:
          name: update-npm
          command: 'sudo npm install -g npm@6.9.0'
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: npm-install
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: npm-test-backend
          command: npm run test:frontend -- --coverage
